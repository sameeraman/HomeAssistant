# MyAir Sensor
  - platform: rest
    resource: http://10.1.1.180:2025/getSystemData
    name: myair
    value_template: 'OK'
    json_attributes:
      - aircons

# unify gateway
  - platform: unifigateway
    host: '10.1.1.218'
    username: !secret unifi_username
    password: !secret unifi_password
    monitored_conditions:
      - www
      - wlan
      - alerts
      - firmware



# fitbit
  - platform: fitbit
    clock_format: 12H
    monitored_resources:
      - "activities/heart"
      - "activities/steps"
      - "sleep/minutesAsleep"
      - "sleep/timeInBed"

# Air conditioner average up time for 2 hours
  - platform: history_stats
    name: myair_state_avg2hr
    entity_id: switch.myair_power
    state: 'on'
    type: time
    end: '{{ now() }}'
    duration:
      hours: 2

# Air conditioner average up time for 4 hours
  - platform: history_stats
    name: myair_state_avg4hr
    entity_id: switch.myair_power
    state: 'on'
    type: time
    end: '{{ now() }}'
    duration:
      hours: 4

# Front Lawn daily avg stats
  - platform: history_stats
    name: front_lawn_daily_stats
    entity_id: switch.front_lawn
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'

# Front Side Lawn daily avg stats
  - platform: history_stats
    name: front_side_lawn_daily_stats
    entity_id: switch.front_side_lawn
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'

# Front Plants daily avg stats
  - platform: history_stats
    name: front_plants_daily_stats
    entity_id: switch.front_plants
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'

# Side Trees daily avg stats
  - platform: history_stats
    name: side_trees_daily_stats
    entity_id: switch.side_trees
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'

# Back Planter Boxes daily avg stats
  - platform: history_stats
    name: back_planter_boxes_daily_stats
    entity_id: switch.back_planter_boxes
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'

# Back Lawn daily avg stats
  - platform: history_stats
    name: back_lawn_daily_stats
    entity_id: switch.back_lawn
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'






# # DarkSky Weather 
#   - platform: darksky
#     api_key: !secret darksky_key
#     latitude: !secret darksky_lat
#     longitude: !secret darksky_long
#     scan_interval: '00:10:00'
#     monitored_conditions:
#         - summary
#         - temperature
#         - hourly_summary
#         - temperature_high


# # #  Efergy solar monitoring - Moved to integration
#   - platform: efergy
#     app_token: !secret efergy_appkey
#     utc_offset: 0
#     monitored_variables:
#       - type: instant_readings
#       - type: current_values



  - platform: template
    sensors:
    # MyAir Sensors (Air Conditioner)
      myair_state:
        friendly_name: AC State
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.info["state"] }}'
      myair_fanspeed:
        friendly_name: AC Fan Speed
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.info["fan"] }}'
      myair_mode:
        friendly_name: AC Mode
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.info["mode"] }}'
      myair_settemp:
        friendly_name: AC Set Temperature
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.info["setTemp"] }}'
      myair_zone1_state:
        friendly_name: Zone 1 A/C Zone State
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z01["state"] }}'
      myair_zone1_cover:
        friendly_name: Zone 1 A/C Zone Airflow
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z01["value"] }}'
      myair_zone2_state:
        friendly_name: Zone 2 A/C Zone State
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z02["state"] }}'
      myair_zone2_cover:
        friendly_name: Zone 2 A/C Zone Airflow
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z02["value"] }}'
      myair_zone3_state:
        friendly_name: Zone 3 A/C Zone State
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z03["state"] }}'
      myair_zone3_cover:
        friendly_name: Zone 3 A/C Zone Airflow
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z03["value"] }}'
      myair_zone4_state:
        friendly_name: Zone 4 A/C Zone State
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z04["state"] }}'
      myair_zone4_cover:
        friendly_name: Zone 4 A/C Zone Airflow
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z04["value"] }}'
      myair_zone5_state:
        friendly_name: Zone 5 A/C Zone State
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z05["state"] }}'
      myair_zone5_cover:
        friendly_name: Zone 5 A/C Zone Airflow
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z05["value"] }}'
      myair_zone6_state:
        friendly_name: Zone 6 A/C Zone State
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z06["state"] }}'
      myair_zone6_cover:
        friendly_name: Zone 6 A/C Zone Airflow
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.zones.z06["value"] }}'
      myair_start_timer:
        friendly_name: My Air Start Timer
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.info["countDownToOn"] }}'
      myair_stop_timer:
        friendly_name: My Air Stop Timer
        value_template: '{{ states.sensor.myair.attributes.aircons.ac1.info["countDownToOff"] }}'

    # Time sensors
      part_of_day:
        friendly_name: 'Part of Day'
        value_template: >
          {% set hour = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if 7 <= hour < 12 %}    Morning
          {% elif 12 <= hour < 18 %} Afternoon
          {% elif 18 <= hour < 22 %} Evening
          {% else %}                 Midnight
          {% endif %}
        icon_template: >
          {% if is_state('sensor.part_of_day', 'Morning') %}     mdi:weather-sunset-up
          {% elif is_state('sensor.part_of_day', 'Afternoon') %} mdi:weather-sunny
          {% elif is_state('sensor.part_of_day', 'Evening') %}   mdi:weather-sunset-down
          {% else %}                                             mdi:weather-night
          {% endif %}


    # Battery Sensors        
      alfresco_motion_battery:
        friendly_name: Alfresco Motion Sensor Battery
        value_template: >
          {% if is_state('binary_sensor.motion_sensor_158d0002b5eecd', 'unknown') %}
            110
          {% else %}
            {{ states.binary_sensor.motion_sensor_158d0002b5eecd.attributes["battery_level"] | float}}
          {% endif %}
        icon_template: >
          {% set battery_level_xod1 = states.binary_sensor.motion_sensor_158d0002b5eecd.attributes.battery_level|default(0)|int %}
          {% set battery_round_xod1 = (battery_level_xod1 / 10) |int * 10 %}
          {% if battery_round_xod1 >= 100 or is_state('binary_sensor.motion_sensor_158d0002b5eecd', 'unknown') %}
            mdi:battery
          {% elif battery_round_xod1 > 0 %}
            mdi:battery-{{ battery_round_xod1 }}
          {% else %}
            mdi:battery-charging-wireless-outline
          {% endif %}
        unit_of_measurement: '%'
      office_motion_2_battery:
        friendly_name: Office Motion Sensor 2 Battery
        value_template: >
          {% if is_state('binary_sensor.office_motion_zb_1', 'unknown') %}
            110
          {% else %}
            {{ states.binary_sensor.office_motion_zb_1.attributes["battery_level"] | float}}
          {% endif %}
        icon_template: >
          {% set battery_level_xod1 = states.binary_sensor.office_motion_zb_1.attributes.battery_level|default(0)|int %}
          {% set battery_round_xod1 = (battery_level_xod1 / 10) |int * 10 %}
          {% if battery_round_xod1 >= 100 or is_state('binary_sensor.office_motion_zb_1', 'unknown') %}
            mdi:battery
          {% elif battery_round_xod1 > 0 %}
            mdi:battery-{{ battery_round_xod1 }}
          {% else %}
            mdi:battery-charging-wireless-outline
          {% endif %}
        unit_of_measurement: '%'
      smoke_sensor_battery:
        friendly_name: Smoke Sensor Battery
        value_template: >
          {% if is_state('binary_sensor.smoke_sensor_158d00028ee45d', 'unknown') %}
            110
          {% else %}
            {{ states.binary_sensor.smoke_sensor_158d00028ee45d.attributes["battery_level"] | float}}
          {% endif %}
        icon_template: >
          {% set battery_level_xod1 = states.binary_sensor.smoke_sensor_158d00028ee45d.attributes.battery_level|default(0)|int %}
          {% set battery_round_xod1 = (battery_level_xod1 / 10) |int * 10 %}
          {% if battery_round_xod1 >= 100 or is_state('binary_sensor.smoke_sensor_158d00028ee45d', 'unknown') %}
            mdi:battery
          {% elif battery_round_xod1 > 0 %}
            mdi:battery-{{ battery_round_xod1 }}
          {% else %}
            mdi:battery-charging-wireless-outline
          {% endif %}
        unit_of_measurement: '%'
      temperature_sensor_1_battery:
        friendly_name: Switch Box Temperature Sensor Battery
        value_template: >
          {% if is_state('sensor.temperature_158d0002731398', 'unknown') %}
            110
          {% else %}
            {{ states.sensor.temperature_158d0002731398.attributes["battery_level"] | float}}
          {% endif %}
        icon_template: >
          {% set battery_level_xod1 = states.sensor.temperature_158d0002731398.attributes.battery_level|default(0)|int %}
          {% set battery_round_xod1 = (battery_level_xod1 / 10) |int * 10 %}
          {% if battery_round_xod1 >= 100 or is_state('sensor.temperature_158d0002731398', 'unknown') %}
            mdi:battery
          {% elif battery_round_xod1 > 0 %}
            mdi:battery-{{ battery_round_xod1 }}
          {% else %}
            mdi:battery-charging-wireless-outline
          {% endif %}
        unit_of_measurement: '%'

# Sprinkler Minute Template Sensors
      front_lawn_daily_stats_mins:
        friendly_name: Front lawn Daily Stats
        value_template: "{% set hours = states('sensor.front_lawn_daily_stats') | float %} 
          {% set minutes = ((hours % 1) * 60) | round | int %}  
          {{ minutes }}"
        unit_of_measurement: 'minutes'

      front_side_lawn_daily_stats_mins:
        friendly_name: Front Side lawn Daily Stats
        value_template: "{% set hours = states('sensor.front_side_lawn_daily_stats') | float %} 
          {% set minutes = ((hours % 1) * 60) | round | int %}  
          {{ minutes }}"
        unit_of_measurement: 'minutes'
      
      front_plants_daily_stats_mins:
        friendly_name: Front Plants Daily Stats
        value_template: "{% set hours = states('sensor.front_plants_daily_stats') | float %} 
          {% set minutes = ((hours % 1) * 60) | round | int %}  
          {{ minutes }}"
        unit_of_measurement: 'minutes'

      side_trees_daily_stats_mins:
        friendly_name: Side Trees Daily Stats
        value_template: "{% set hours = states('sensor.side_trees_daily_stats') | float %} 
          {% set minutes = ((hours % 1) * 60) | round | int %}  
          {{ minutes }}"
        unit_of_measurement: 'minutes'

      back_planter_boxes_daily_stats_mins:
        friendly_name: Back Planter Boxes Daily Stats
        value_template: "{% set hours = states('sensor.back_planter_boxes_daily_stats') | float %} 
          {% set minutes = ((hours % 1) * 60) | round | int %}  
          {{ minutes }}"
        unit_of_measurement: 'minutes'

      back_lawn_daily_stats_mins:
        friendly_name: Back Lawn Daily Stats
        value_template: "{% set hours = states('sensor.back_lawn_daily_stats') | float %} 
          {% set minutes = ((hours % 1) * 60) | round | int %}  
          {{ minutes }}"
        unit_of_measurement: 'minutes'

      sprinkler_runtime_seconds:
        friendly_name: Sprinkler Runtime in seconds
        value_template: >
          {% if is_state('input_select.sprinkler_runtime', '1 min') %}
            60
          {% elif is_state('input_select.sprinkler_runtime', '2 mins') %}
            120
          {% elif is_state('input_select.sprinkler_runtime', '5 mins') %}
            300
          {% elif is_state('input_select.sprinkler_runtime', '10 mins') %}
            600
          {% else %}
            60
          {% endif %}
        unit_of_measurement: 'seconds'

# Unify Gateway sensors
      unifi_gateway_www_speed_down:
          friendly_name: 'USG Download Speed'
          unit_of_measurement: KBps
          value_template: "{{ (states.sensor.unifi_gateway_www.attributes['rx_bytes-r'] | int / 1024) | round(1) }}"
      unifi_gateway_www_speed_up:
          friendly_name: 'USG Upload Speed'
          unit_of_measurement: KBps
          value_template: "{{ (states.sensor.unifi_gateway_www.attributes['tx_bytes-r'] | int / 1024) | round(1) }}"

# water meter
      water_usage_liters:
        unit_of_measurement: 'l'
        friendly_name: 'Water Usage Liters'
        value_template: "{{ states('counter.water_meter_count') | int }}"

      uptime_minutes:
        friendly_name: UpTime Minutes
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states('sensor.uptime'))) // 60| round (0)  }}


# Power Meter Sensors

# Solar Generation
      solar_generation:
        friendly_name: "Solar Generation"
        unit_of_measurement: "W"
        device_class: power
        value_template: >-
            {% set solar_generation = states('sensor.sigen_plant_pv_power') | float * 1000 %}
            {{ solar_generation }}
        availability_template: "{{ states('sensor.sigen_plant_pv_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# Power Consumption
      power_consumption:
        friendly_name: "Power Consumption"
        unit_of_measurement: "W"
        device_class: power
        value_template: >-
          {% set electricity_usage = states('sensor.sigen_plant_consumed_power') | float * 1000 %}
          {{ electricity_usage }}
        availability_template: "{{ states('sensor.sigen_plant_consumed_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Solar Feed
      solar_feed:
        friendly_name: "Solar Feed (Excess Power)"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set solar_feed = states('sensor.sigen_plant_grid_export_power') | float * 1000 %}
          {% if solar_feed > 25 %}
            {{ solar_feed }}
          {% else %}
            0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_grid_export_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.power_consumption') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# Battery Power
      battery_power:
        friendly_name: "Battery Power"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set battery_power = states('sensor.sigen_plant_battery_power') | float * 1000 %}
          {{ battery_power }}
        availability_template: "{{ states('sensor.sigen_plant_battery_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"




# Energy going into the battery
      battery_charging_power:
        friendly_name: "Battery Charging Power"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set battery_charging = (states('sensor.sigen_plant_battery_power') | float * 1000) %}
          {% if battery_charging > 0 %}
            {{ battery_charging | abs }}
          {% else %}
            0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_battery_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.power_consumption') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# Energy Going out of the battery
      battery_discharging_power:
        friendly_name: "Battery Discharging Power"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set battery_discharging = (states('sensor.sigen_plant_battery_power') | float * 1000) %}
          {% if battery_discharging < 0 %}
            {{ battery_discharging | abs }}
          {% else %}
            0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_battery_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.power_consumption') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# Grid Consumption
      grid_consumption:
        friendly_name: "Grid Consumption"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set grid_consumption = states('sensor.sigen_plant_grid_import_power') | float * 1000 %}
          {% if grid_consumption > 25 %}
            {{ grid_consumption }}
          {% else %}
            0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_grid_import_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.power_consumption') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Energy Grid Power Value
      grid_power:
        friendly_name: "Grid Power"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set grid_power = states('sensor.sigen_plant_grid_active_power') | float * 1000  %}
          {% if (grid_power | abs) > 25 %}
            {{ grid_power }}
          {% else %}
            0
          {% endif %}
        availability_template: "{{ states('sensor.solar_generation') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.power_consumption') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Synergy Electricity Rates - EV Plan
      synergy_electrity_rate:
        friendly_name: 'Synergy Electricity Rate'
        unit_of_measurement: "AUD/kWh"
        value_template: >
          {% set hour = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if 0 <= hour < 6 %} 0.1845
          {% elif 6 <= hour < 9 %} 0.2255
          {% elif 9 <= hour < 15 %} 0.0820
          {% elif 15 <= hour < 21 %} 0.5125
          {% elif 21 <= hour < 23 %} 0.2255
          {% elif 23 <= hour < 24 %} 0.1845
          {% else %} Unknown
          {% endif %}
        availability_template: "{{ states('sensor.time') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Grid Consumption - Peak
      grid_consumption_peak:
        friendly_name: "Grid Consumption - Peak"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set grid_consumption = states('sensor.sigen_plant_grid_import_power') | float * 1000 %}
          {% set hour = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if 15 <= hour < 21 %} {{ grid_consumption }}
          {% else %} 0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_grid_import_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Grid Consumption - Overnight
      grid_consumption_overnight:
        friendly_name: "Grid Consumption - Overnight"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set grid_consumption = states('sensor.sigen_plant_grid_import_power') | float * 1000  %}
          {% set hour = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if 0 <= hour < 6 %}  {{ grid_consumption }}
          {% elif 23 <= hour < 24 %}  {{ grid_consumption }}
          {% else %} 0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_grid_import_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Grid Consumption - Offpeak
      grid_consumption_offpeak:
        friendly_name: "Grid Consumption - Offpeak"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set grid_consumption = states('sensor.sigen_plant_grid_import_power') | float * 1000 %}
          {% set hour = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if 6 <= hour < 9 %}  {{ grid_consumption }}
          {% elif 21 <= hour < 23 %}  {{ grid_consumption }}
          {% else %} 0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_grid_import_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Grid Consumption Super OffPeak
      grid_consumption_superoffpeak:
        friendly_name: "Grid Consumption - Super Offpeak"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set grid_consumption = states('sensor.sigen_plant_grid_import_power') | float * 1000 %}
          {% set hour = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if 9 <= hour < 15 %} {{ grid_consumption }}
          {% else %} 0
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_grid_import_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Solar usage
      solar_own_usage_power:
        friendly_name: "Solar Usage Power"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set solar_gen = states('sensor.solar_generation') | float(0) %}
          {% set electricity_usage = states('sensor.power_consumption') | float(0) %}
          {% set solar_usage = (electricity_usage - solar_gen) | round(2) %}
          {% if solar_gen <= electricity_usage %}  {{ solar_gen }}
          {% else %} {{ electricity_usage }}
          {% endif %}
        availability_template: "{{ states('sensor.solar_generation') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.power_consumption') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# Solar usage
      solar_battery_own_usage_power:
        friendly_name: "Solar & Battery Usage Power"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set electricity_usage = states('sensor.power_consumption') | float(0) %}
          {% set grid_consumption = states('sensor.sigen_plant_grid_import_power') | float * 1000 %}
          {% set solar_battery_usage = (electricity_usage - solar_gen) | round(2) %}
          {% if grid_consumption + 100 <= electricity_usage %}  {{ solar_battery_usage }}
          {% else %} {{ electricity_usage }}
          {% endif %}
        availability_template: "{{ states('sensor.sigen_plant_grid_import_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.power_consumption') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Solar Usage Savings in AUD
      solar_own_usage_saving_now:
        friendly_name: 'Solar Own Usage Saving Now'
        unit_of_measurement: "AUD"
        value_template: "{{ states('sensor.synergy_electrity_rate') | float * states('sensor.solar_own_usage_power') | float / 1000 }}"
        availability_template: "{{ states('sensor.synergy_electrity_rate') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.solar_own_usage_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# Solar & Battery Usage Savings in AUD
      solar_battery_own_usage_saving_now:
        friendly_name: 'Solar & Battery Own Usage Saving Now'
        unit_of_measurement: "AUD"
        value_template: "{{ states('sensor.synergy_electrity_rate') | float * states('sensor.solar_battery_own_usage_power') | float / 1000 }}"
        availability_template: "{{ states('sensor.synergy_electrity_rate') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.solar_battery_own_usage_power') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Solar Export earnings in AUD
      solar_export_earnings_now:
        friendly_name: 'Solar Export Earnings Now'
        unit_of_measurement: "AUD"
        value_template: "{{ 0.07 | float * states('sensor.solar_feed') | float / 1000 }}"
        availability_template: "{{ states('sensor.solar_feed') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# MLX90640 Thermal WC Sensor 
      master_wc_mlx90640_temp_diff:
        friendly_name: 'Master WC MLX90640 Temp Difference'
        unit_of_measurement: "°C"
        value_template: "{{ states('sensor.master_wc_mlx90640_max_temp') | float - states('sensor.master_wc_mlx90640_min_temp') | float }}"
        availability_template: "{{ states('sensor.master_wc_mlx90640_max_temp') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.master_wc_mlx90640_min_temp') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"

# MLX90640 Thermal Bath Sensor 
      master_bath_mlx90640_temp_diff:
        friendly_name: 'Master Bath MLX90640 Temp Difference'
        unit_of_measurement: "°C"
        value_template: "{{ states('sensor.master_bath_mlx90640_max_temp') | float - states('sensor.master_bath_mlx90640_min_temp') | float }}"
        availability_template: "{{ states('sensor.master_bath_mlx90640_max_temp') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] and states('sensor.master_bath_mlx90640_min_temp') not in ['Unavailable', 'unavailable', 'unknown', 'Unknown', 'none'] }}"


# Time sensor
  - platform: time_date
    display_options:
      - 'time'

# Energy 
  - platform: integration
    source: sensor.power_consumption
    name: electricity_consumed
    unit_prefix: k
    round: 2
    method: left
    
  - platform: integration
    source: sensor.solar_generation
    name: solar_generated
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.solar_feed
    name: solar_feed_to_grid
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.grid_power
    name: grid_power_integration
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.grid_consumption
    name: grid_consumption_integration
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.battery_charging_power
    name: Battery Charged
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.battery_discharging_power
    name: Battery Discharged
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.grid_consumption_peak
    name: grid_consumption_peak_integration
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.grid_consumption_overnight
    name: grid_consumption_overnight_integration
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.grid_consumption_offpeak
    name: grid_consumption_offpeak_integration
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.grid_consumption_superoffpeak
    name: grid_consumption_superoffpeak_integration
    unit_prefix: k
    round: 2
    method: left

  - platform: integration
    source: sensor.solar_own_usage_saving_now
    name: solar_own_usage_saving_integration
    round: 2
    method: left

  - platform: integration
    source: sensor.solar_export_earnings_now
    name: solar_export_earnings_integration
    round: 2
    method: left

  # - platform: integration
  #   source: sensor.watermeter
  #   name: water_meter_daily_integration
  #   round: 3

# # Australian Bureau of Meteorology (BOM)
#   - platform: bom
#     station: !secret bomstationid
#     monitored_conditions:
#       - apparent_t
#       - cloud
#  #     - cloud_base_m
#  #     - cloud_oktas
#  #     - cloud_type_id
#  #     - cloud_type
#       - delta_t
#       - gust_kmh
#       - gust_kt
#       - air_temp
#       - dewpt
#       - local_date_time
#       - local_date_time_full
#       - press
#       - press_qnh
#       - press_msl
#       - press_tend
#       - rain_trace
#       - rel_hum
#       - sea_state
#       - swell_dir_worded
#       - swell_height
#       - swell_period
#       - vis_km
#       - weather
#       - wind_dir
#       - wind_spd_kmh
#       - wind_spd_kt
